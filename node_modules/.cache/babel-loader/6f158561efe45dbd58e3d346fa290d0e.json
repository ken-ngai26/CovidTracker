{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kenngai/Desktop/cmpt383/CMPT383-project/cmpt-383-project/frontend/src/LineGraph.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nconst options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      }\n    }\n  },\n  scales: {\n    xAxes: [{\n      type: \"time\",\n      time: {\n        format: \"MM/DD/YY\",\n        tooltipFormat: \"ll\"\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        display: false\n      },\n      ticks: {\n        callback: function (value, index, values) {\n          return numeral(value).format(\"0a\");\n        }\n      }\n    }]\n  }\n};\n\nconst buildChart = (data, casesType) => {\n  const chartData = []; //find the new cases by substracting the difference\n\n  let lastData;\n\n  for (let date in data.cases) {\n    if (lastData) {\n      let newData = {\n        x: date,\n        y: data[casesType][date] - lastData\n      };\n      chartData.push(newData);\n    }\n\n    lastData = data[casesType][date];\n  }\n\n  return chartData;\n};\n\nfunction LineGraph({\n  casesType\n}) {\n  _s();\n\n  var _data;\n\n  const [getData, setData] = React.useState({});\n  React.useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\").then(response => {\n        return response.json();\n      }).then(getData => {\n        let chartData = buildChart(getData, casesType);\n        setData(chartData);\n      });\n    };\n\n    fetchData();\n  }, [casesType]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"This is graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), ((_data = data) === null || _data === void 0 ? void 0 : _data.length) > 0 && /*#__PURE__*/_jsxDEV(Line, {\n      data: {\n        datasets: [{\n          blackgroundColor: 'rgba(200,20,50,0.5',\n          borderColor: '#CC1034',\n          data: getData\n        }]\n      },\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LineGraph, \"EGgZuHUdGMp0nF51a5cM92xWWJs=\");\n\n_c = LineGraph;\nexport default LineGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"sources":["/Users/kenngai/Desktop/cmpt383/CMPT383-project/cmpt-383-project/frontend/src/LineGraph.js"],"names":["React","Line","numeral","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChart","casesType","chartData","lastData","date","cases","newData","x","y","push","LineGraph","getData","setData","useState","useEffect","fetchData","fetch","then","response","json","length","datasets","blackgroundColor","borderColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Line } from \"react-chartjs-2\"\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChart = (data, casesType) => {\n  const chartData = [];\n  //find the new cases by substracting the difference\n  let lastData;\n  for(let date in data.cases){\n    if(lastData) {\n      let newData = {\n        x: date,\n        y: data[casesType][date] - lastData,\n      };\n      chartData.push(newData);\n    }\n    lastData = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({casesType}) {\n    const [getData, setData] = React.useState({});\n    \n    React.useEffect(() => {\n      const fetchData = async() => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((getData) => {\n        let chartData = buildChart(getData, casesType);\n        setData(chartData);\n      });\n    };\n    fetchData();\n    }, [casesType]);\n\n    return (\n        <div>\n            <h1>This is graph</h1>\n            {data?.length > 0 && (\n            <Line data = {{\n              datasets: [{\n                blackgroundColor: 'rgba(200,20,50,0.5',\n                borderColor: '#CC1034',\n                data: getData,\n              },\n            ],\n            }}\n            options = {options} />)}            \n        </div>\n    );\n}\n\nexport default LineGraph\n"]},"metadata":{},"sourceType":"module"}